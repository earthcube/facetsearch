(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["npm.vue-range-component-fixed"],{

/***/ "./node_modules/vue-range-component-fixed/dist/vue-range-slider.esm.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/vue-range-component-fixed/dist/vue-range-slider.esm.js ***!
  \*****************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/*!\n * vue-range-slider v1.0.3\n * (c) 2016-2020 xwpongithub\n * Released under the MIT License.\n */\n\n// Unsharp text [#166](https://github.com/NightCatSama/vue-slider-component/issues/166)\nvar roundToDPR = function () {\n  var r = typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1;\n  return function (value) {\n    return Math.round(value * r) / r;\n  };\n}();\nvar isMobile = function () {\n  var userAgentInfo = navigator.userAgent.toLowerCase();\n  var agents = [\"Android\", \"iPhone\", \"SymbianOS\", \"Windows Phone\", \"iPad\", \"iPod\"];\n  var flag = false;\n\n  for (var v = 0; v < agents.length; v++) {\n    if (userAgentInfo.indexOf(agents[v].toLowerCase()) > 0) {\n      flag = true;\n      break;\n    }\n  }\n\n  return flag;\n}();\nfunction isArray(input) {\n  if (Array.prototype.isArray) {\n    return Array.isArray(input);\n  }\n\n  return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';\n}\nfunction isDiff(a, b) {\n  if (Object.prototype.toString.call(a) !== Object.prototype.toString.call(b)) {\n    return true;\n  } else if (isArray(a) && a.length === b.length) {\n    return a.some(function (v, i) {\n      return v !== b[i];\n    });\n  }\n\n  return a !== b;\n}\nvar elementStyle = document.createElement('div').style;\n\nvar vendor = function () {\n  var transformNames = {\n    webkit: 'webkitTransform',\n    Moz: 'MozTransform',\n    O: 'OTransform',\n    ms: 'msTransform',\n    standard: 'transform'\n  };\n\n  for (var key in transformNames) {\n    if (elementStyle[transformNames[key]] !== undefined) {\n      return key;\n    }\n  }\n\n  return false;\n}();\n\nfunction prefixStyle(style) {\n  if (vendor === false) {\n    return false;\n  }\n\n  if (vendor === 'standard') {\n    if (style === 'transitionEnd') {\n      return 'transitionend';\n    }\n\n    return style;\n  }\n\n  return vendor + style.charAt(0).toUpperCase() + style.substr(1);\n}\nfunction addEvent(el, type, fn, capture) {\n  el.addEventListener(type, fn, {\n    passive: false,\n    capture: !!capture\n  });\n}\nfunction removeEvent(el, type, fn, capture) {\n  el.removeEventListener(type, fn, {\n    passive: false,\n    capture: !!capture\n  });\n}\n\nvar transform = prefixStyle('transform');\nvar transitionDuration = prefixStyle('transitionDuration');\nvar transitionEnd = prefixStyle('transitionEnd');\nvar EVENT_TOUCH_START = 'touchstart';\nvar EVENT_TOUCH_MOVE = 'touchmove';\nvar EVENT_TOUCH_END = 'touchend';\nvar EVENT_TOUCH_CANCEL = 'touchcancel';\nvar EVENT_MOUSE_DOWN = 'mousedown';\nvar EVENT_MOUSE_MOVE = 'mousemove';\nvar EVENT_MOUSE_UP = 'mouseup';\nvar EVENT_MOUSE_LEAVE = 'mouseleave';\nvar EVENT_KEY_DOWN = 'keydown';\nvar EVENT_KEY_UP = 'keyup';\nvar EVENT_RESIZE = 'resize';\nvar Slider = {\n  name: 'vue-range-slider',\n  props: {\n    // 是否显示组件\n    show: {\n      type: Boolean,\n      default: true\n    },\n    // 值\n    value: {\n      type: [String, Number, Array, Object],\n      default: 0\n    },\n    // 最小值\n    min: {\n      type: Number,\n      default: 0\n    },\n    // 最大值\n    max: {\n      type: Number,\n      default: 100\n    },\n    // 分段间隔\n    step: {\n      type: Number,\n      default: 1\n    },\n    // 组件宽度\n    width: {\n      type: [Number, String],\n      default: 'auto'\n    },\n    // 组件高度\n    height: {\n      type: [Number, String],\n      default: 6\n    },\n    // 滑块大小\n    dotSize: {\n      type: Number,\n      default: 16\n    },\n    dotWidth: {\n      type: Number,\n      required: false\n    },\n    dotHeight: {\n      type: Number,\n      required: false\n    },\n    stopPropagation: {\n      type: Boolean,\n      default: false\n    },\n    // 事件类型\n    eventType: {\n      type: String,\n      default: 'auto'\n    },\n    // 是否实时计算组件布局\n    realTime: {\n      type: Boolean,\n      default: false\n    },\n    // 是否显示工具提示\n    tooltip: {\n      type: [String, Boolean],\n      default: 'always',\n      validator: function validator(val) {\n        return ['hover', 'always', false].indexOf(val) > -1;\n      }\n    },\n    // 组件方向\n    direction: {\n      type: String,\n      default: 'horizontal',\n      validator: function validator(val) {\n        return ['horizontal', 'vertical'].indexOf(val) > -1;\n      }\n    },\n    // 是否反向组件\n    reverse: {\n      type: Boolean,\n      default: false\n    },\n    // 是否不可用\n    disabled: {\n      type: [Boolean, Array],\n      default: false\n    },\n    piecewiseLabel: {\n      type: Boolean,\n      default: false\n    },\n    piecewise: {\n      type: Boolean,\n      default: false\n    },\n    // 进度条是否可拖拽（只限范围模式）\n    processDraggable: {\n      type: Boolean,\n      default: false\n    },\n    // 是否可点击的\n    clickable: {\n      type: Boolean,\n      default: true\n    },\n    // 是否固定距离\n    fixed: {\n      type: Boolean,\n      default: false\n    },\n    // 是否为开发环境（打印错误）\n    debug: {\n      type: Boolean,\n      default: true\n    },\n    // 最小范围\n    minRange: {\n      type: Number\n    },\n    // 最大范围\n    maxRange: {\n      type: Number\n    },\n    tooltipMerge: {\n      type: Boolean,\n      default: true\n    },\n    // 是否开启初始动画\n    startAnimation: {\n      type: Boolean,\n      default: false\n    },\n    // 是否在拖拽结束后同步值\n    lazy: {\n      type: Boolean,\n      default: false\n    },\n    // 在范围模式中，是否允许交叉\n    enableCross: {\n      type: Boolean,\n      default: true\n    },\n    // 动画速度比\n    speed: {\n      type: Number,\n      default: 0.5\n    },\n    useKeyboard: {\n      type: Boolean,\n      default: false\n    },\n    actionsKeyboard: {\n      type: Array,\n      default: function _default() {\n        return [function (i) {\n          return i - 1;\n        }, function (i) {\n          return i + 1;\n        }];\n      }\n    },\n    data: Array,\n    formatter: [String, Function],\n    mergeFormatter: [String, Function],\n    // 工具提示方向\n    tooltipDir: [Array, String],\n    // 工具提示样式\n    tooltipStyle: [Array, Object, Function],\n    // 滑块样式\n    sliderStyle: [Array, Object, Function],\n    // 键盘控制时，算滑块获得焦点时样式\n    focusStyle: [Array, Object, Function],\n    // 组件禁用状态下样式\n    disabledStyle: Object,\n    // 进度条样式\n    processStyle: Object,\n    // 组件背景样式\n    bgStyle: Object,\n    piecewiseStyle: Object,\n    piecewiseActiveStyle: Object,\n    disabledDotStyle: [Array, Object, Function],\n    labelStyle: Object,\n    labelActiveStyle: Object\n  },\n  data: function data() {\n    return {\n      currentValue: 0,\n      size: 0,\n      fixedValue: 0,\n      focusSlider: 0,\n      currentSlider: 0,\n      flag: false,\n      processFlag: false,\n      processSign: false,\n      keydownFlag: false,\n      focusFlag: false,\n      dragFlag: false,\n      crossFlag: false,\n      isComponentExists: true,\n      isMounted: false\n    };\n  },\n  render: function render(h) {\n    var _this = this;\n\n    var sliderConBlocks = []; // dot\n\n    if (this.isRange) {\n      var dot0 = h('div', {\n        ref: 'dot0',\n        staticClass: 'slider-dot',\n        class: [this.tooltipStatus, {\n          'slider-dot-focus': this.focusFlag && this.focusSlider === 0,\n          'slider-dot-dragging': this.flag && this.currentSlider === 0,\n          'slider-dot-disabled': !this.boolDisabled && this.disabledArray[0]\n        }],\n        style: this.dotStyles\n      }, [this._t('dot', [h('div', {\n        staticClass: 'slider-dot-handle',\n        style: [!this.boolDisabled && this.disabledArray[0] ? this.disabledDotStyles[0] : null, this.sliderStyles[0], this.focusFlag && this.focusSlider === 0 ? this.focusStyles[0] : null]\n      })], {\n        index: 0,\n        value: this.val[0],\n        disabled: this.disabledArray[0]\n      }), h('div', {\n        ref: 'tooltip0',\n        staticClass: 'slider-tooltip-wrap',\n        class: \"slider-tooltip-\".concat(this.tooltipDirection[0])\n      }, [this._t('tooltip', [h('span', {\n        staticClass: 'slider-tooltip',\n        style: this.tooltipStyles[0]\n      }, this.formatter ? this.formatting(this.val[0]) : this.val[0])], {\n        value: this.val[0],\n        index: 0,\n        disabled: !this.boolDisabled && this.disabledArray[0]\n      })])]);\n      sliderConBlocks.push(dot0);\n      var dot1 = h('div', {\n        ref: 'dot1',\n        staticClass: 'slider-dot',\n        class: [this.tooltipStatus, {\n          'slider-dot-focus': this.focusFlag && this.focusSlider === 1,\n          'slider-dot-dragging': this.flag && this.currentSlider === 1,\n          'slider-dot-disabled': !this.boolDisabled && this.disabledArray[1]\n        }],\n        style: this.dotStyles\n      }, [this._t('dot', [h('div', {\n        staticClass: 'slider-dot-handle',\n        style: [!this.boolDisabled && this.disabledArray[1] ? this.disabledDotStyles[1] : null, this.sliderStyles[1], this.focusFlag && this.focusSlider === 1 ? this.focusStyles[1] : null]\n      })], {\n        index: 1,\n        value: this.val[1],\n        disabled: this.disabledArray[1]\n      }), h('div', {\n        ref: 'tooltip1',\n        staticClass: 'slider-tooltip-wrap',\n        class: \"slider-tooltip-\".concat(this.tooltipDirection[1])\n      }, [this._t('tooltip', [h('span', {\n        staticClass: 'slider-tooltip',\n        style: this.tooltipStyles[1]\n      }, this.formatter ? this.formatting(this.val[1]) : this.val[1])], {\n        value: this.val[1],\n        index: 1,\n        disabled: !this.boolDisabled && this.disabledArray[1]\n      })])]);\n      sliderConBlocks.push(dot1);\n    } else {\n      var dot = h('div', {\n        ref: 'dot',\n        staticClass: 'slider-dot',\n        class: [this.tooltipStatus, {\n          'slider-dot-focus': this.focusFlag && this.focusSlider === 0,\n          'slider-dot-dragging': this.flag && this.currentSlider === 0\n        }],\n        style: this.dotStyles\n      }, [this._t('dot', [h('div', {\n        staticClass: 'slider-dot-handle',\n        style: [this.sliderStyles, this.focusFlag && this.focusSlider === 0 ? this.focusStyles : null]\n      })], {\n        value: this.val,\n        disabled: this.boolDisabled\n      }), h('div', {\n        staticClass: 'slider-tooltip-wrap',\n        class: \"slider-tooltip-\".concat(this.tooltipDirection)\n      }, [this._t('tooltip', [h('span', {\n        staticClass: 'slider-tooltip',\n        style: this.tooltipStyles\n      }, this.formatter ? this.formatting(this.val) : this.val)], {\n        value: this.val\n      })])]);\n      sliderConBlocks.push(dot);\n    } // piecewise\n\n\n    var dotWrapLen = this.piecewiseDotWrap.length;\n    var ulBlock = h('ul', {\n      staticClass: 'slider-piecewise'\n    }, this._l(this.piecewiseDotWrap, function (item, i) {\n      var piecewiseDot = [];\n\n      if (_this.piecewise) {\n        piecewiseDot.push(h('span', {\n          staticClass: 'piecewise-dot',\n          style: [_this.piecewiseStyle, item.inRange ? _this.piecewiseActiveStyle : null]\n        }));\n      }\n\n      var piecewiseLabel = [];\n\n      if (_this.piecewiseLabel) {\n        piecewiseLabel.push(h('span', {\n          staticClass: 'piecewise-label',\n          style: [_this.labelStyle, item.inRange ? _this.labelActiveStyle : null]\n        }, item.label));\n      }\n\n      return h('li', {\n        key: i,\n        staticClass: 'piecewise-item',\n        style: [_this.piecewiseDotStyle, item.style]\n      }, [_this._t('piecewise', piecewiseDot, {\n        label: item.label,\n        index: i,\n        first: i === 0,\n        last: i === dotWrapLen - 1,\n        active: item.inRange\n      }), _this._t('label', piecewiseLabel, {\n        label: item.label,\n        index: i,\n        first: i === 0,\n        last: i === dotWrapLen - 1,\n        active: item.inRange\n      })]);\n    }));\n    sliderConBlocks.push(ulBlock); // process\n\n    var processBlock = h('div', {\n      ref: 'process',\n      staticClass: 'slider-process',\n      class: {\n        'slider-process-draggable': this.isRange && this.processDraggable\n      },\n      style: this.processStyle,\n      on: {\n        click: function click(e) {\n          return _this.processClick(e);\n        }\n      }\n    }, [h('div', {\n      ref: 'mergedTooltip',\n      staticClass: 'merged-tooltip slider-tooltip-wrap',\n      class: \"slider-tooltip-\".concat(this.isRange ? this.tooltipDirection[0] : this.tooltipDirection),\n      style: this.tooltipMergedPosition\n    }, [this._t('tooltip', [h('span', {\n      staticClass: 'slider-tooltip',\n      style: this.tooltipStyles\n    }, this.mergeFormatter ? this.mergeFormatting(this.val[0], this.val[1]) : this.formatter ? this.val[0] === this.val[1] ? this.formatting(this.val[0]) : \"\".concat(this.formatting(this.val[0]), \" - \").concat(this.formatting(this.val[1])) : this.val[0] === this.val[1] ? this.val[0] : \"\".concat(this.val[0], \" - \").concat(this.val[1]))], {\n      value: this.val,\n      merge: true\n    })])]);\n    sliderConBlocks.push(processBlock); // <input type=\"range\">\n\n    if (!this.isRange && !this.data) {\n      sliderConBlocks.push(h('input', {\n        staticClass: 'slider-input',\n        attrs: {\n          type: 'range',\n          min: this.min,\n          max: this.max\n        },\n        domProps: {\n          value: this.val\n        },\n        on: {\n          input: function input(e) {\n            return _this.val = e.target.value;\n          }\n        }\n      }));\n    }\n\n    return h('div', {\n      ref: 'wrap',\n      staticClass: 'vue-range-slider slider-component',\n      class: [this.flowDirection, this.disabledClass, this.stateClass, {\n        'slider-has-label': this.piecewiseLabel\n      }],\n      style: [this.wrapStyles, this.boolDisabled ? this.disabledStyle : null],\n      directives: [{\n        name: 'show',\n        value: this.show\n      }],\n      on: {\n        click: function click(e) {\n          return _this.wrapClick(e);\n        }\n      }\n    }, [h('div', {\n      ref: 'elem',\n      staticClass: 'slider',\n      style: [this.elemStyles, this.bgStyle],\n      attrs: {\n        'aria-hidden': true\n      }\n    }, sliderConBlocks)]);\n  },\n  computed: {\n    val: {\n      get: function get() {\n        return this.data ? this.isRange ? [this.data[this.currentValue[0]], this.data[this.currentValue[1]]] : this.data[this.currentValue] : this.currentValue;\n      },\n      set: function set(val) {\n        if (this.data) {\n          if (this.isRange) {\n            var index0 = this.data.indexOf(val[0]);\n            var index1 = this.data.indexOf(val[1]);\n\n            if (index0 > -1 && index1 > -1) {\n              this.currentValue = [index0, index1];\n            }\n          } else {\n            var index = this.data.indexOf(val);\n\n            if (index > -1) {\n              this.currentValue = index;\n            }\n          }\n        } else {\n          this.currentValue = val;\n        }\n      }\n    },\n    currentIndex: function currentIndex() {\n      if (this.isRange) {\n        return this.data ? this.currentValue : [this.getIndexByValue(this.currentValue[0]), this.getIndexByValue(this.currentValue[1])];\n      } else {\n        return this.getIndexByValue(this.currentValue);\n      }\n    },\n    tooltipMergedPosition: function tooltipMergedPosition() {\n      if (!this.isMounted) return {};\n      var tooltipDirection = this.tooltipDirection[0];\n      var dot0 = this.$refs.dot0;\n\n      if (dot0) {\n        var style = {};\n\n        if (this.direction === 'vertical') {\n          style[tooltipDirection] = \"-\".concat(this.dotHeightVal / 2 - this.width / 2 + 9, \"px\");\n        } else {\n          style[tooltipDirection] = \"-\".concat(this.dotWidthVal / 2 - this.height / 2 + 9, \"px\");\n          style['left'] = \"50%\";\n        }\n\n        return style;\n      }\n    },\n    tooltipDirection: function tooltipDirection() {\n      var dir = this.tooltipDir || (this.direction === 'vertical' ? 'left' : 'top');\n\n      if (isArray(dir)) {\n        return this.isRange ? dir : dir[1];\n      } else {\n        return this.isRange ? [dir, dir] : dir;\n      }\n    },\n    piecewiseDotWrap: function piecewiseDotWrap() {\n      if (!this.piecewise && !this.piecewiseLabel) {\n        return false;\n      }\n\n      var arr = [];\n\n      for (var i = 0; i <= this.total; i++) {\n        var style = this.direction === 'vertical' ? {\n          bottom: \"\".concat(this.gap * i - this.width / 2, \"px\"),\n          left: 0\n        } : {\n          left: \"\".concat(this.gap * i - this.height / 2, \"px\"),\n          top: 0\n        };\n        var index = this.reverse ? this.total - i : i;\n        var label = this.data ? this.data[index] : this.spacing * index + this.min;\n        arr.push({\n          style: style,\n          label: this.formatter ? this.formatting(label) : label,\n          inRange: index >= this.indexRange[0] && index <= this.indexRange[1]\n        });\n      }\n\n      return arr;\n    },\n    total: function total() {\n      if (this.data) {\n        return this.data.length - 1;\n      } else if (Math.floor((this.maximum - this.minimum) * this.multiple) % (this.step * this.multiple) !== 0) {\n        this.printError('Prop[step] is illegal, Please make sure that the step can be divisible');\n      }\n\n      return (this.maximum - this.minimum) / this.step;\n    },\n    piecewiseDotStyle: function piecewiseDotStyle() {\n      return this.direction === 'vertical' ? {\n        width: \"\".concat(this.width, \"px\"),\n        height: \"\".concat(this.width, \"px\")\n      } : {\n        width: \"\".concat(this.height, \"px\"),\n        height: \"\".concat(this.height, \"px\")\n      };\n    },\n    dotStyles: function dotStyles() {\n      return this.direction === 'vertical' ? {\n        width: \"\".concat(this.dotWidthVal, \"px\"),\n        height: \"\".concat(this.dotHeightVal, \"px\"),\n        left: \"\".concat(-(this.dotWidthVal - this.width) / 2, \"px\")\n      } : {\n        width: \"\".concat(this.dotWidthVal, \"px\"),\n        height: \"\".concat(this.dotHeightVal, \"px\"),\n        top: \"\".concat(-(this.dotHeightVal - this.height) / 2, \"px\")\n      };\n    },\n    sliderStyles: function sliderStyles() {\n      if (isArray(this.sliderStyle)) {\n        return this.isRange ? this.sliderStyle : this.sliderStyle[1];\n      } else if (typeof this.sliderStyle === 'function') {\n        return this.sliderStyle(this.val, this.currentIndex);\n      } else {\n        return this.isRange ? [this.sliderStyle, this.sliderStyle] : this.sliderStyle;\n      }\n    },\n    tooltipStyles: function tooltipStyles() {\n      if (isArray(this.tooltipStyle)) {\n        return this.isRange ? this.tooltipStyle : this.tooltipStyle[1];\n      } else if (typeof this.tooltipStyle === 'function') {\n        return this.tooltipStyle(this.val, this.currentIndex);\n      } else {\n        return this.isRange ? [this.tooltipStyle, this.tooltipStyle] : this.tooltipStyle;\n      }\n    },\n    focusStyles: function focusStyles() {\n      if (isArray(this.focusStyle)) {\n        return this.isRange ? this.focusStyle : this.focusStyle[1];\n      } else if (typeof this.focusStyle === 'function') {\n        return this.focusStyle(this.val, this.currentIndex);\n      } else {\n        return this.isRange ? [this.focusStyle, this.focusStyle] : this.focusStyle;\n      }\n    },\n    disabledDotStyles: function disabledDotStyles() {\n      var disabledStyle = this.disabledDotStyle;\n\n      if (isArray(disabledStyle)) {\n        return disabledStyle;\n      } else if (typeof disabledStyle === 'function') {\n        var style = disabledStyle(this.val, this.currentIndex);\n        return isArray(style) ? style : [style, style];\n      } else if (disabledStyle) {\n        return [disabledStyle, disabledStyle];\n      } else {\n        return [{\n          backgroundColor: '#ccc'\n        }, {\n          backgroundColor: '#ccc'\n        }];\n      }\n    },\n    elemStyles: function elemStyles() {\n      return this.direction === 'vertical' ? {\n        width: \"\".concat(this.width, \"px\"),\n        height: '100%'\n      } : {\n        height: \"\".concat(this.height, \"px\")\n      };\n    },\n    wrapStyles: function wrapStyles() {\n      return this.direction === 'vertical' ? {\n        height: typeof this.height === 'number' ? \"\".concat(this.height, \"px\") : this.height,\n        padding: \"\".concat(this.dotHeightVal / 2, \"px \").concat(this.dotWidthVal / 2, \"px\")\n      } : {\n        width: typeof this.width === 'number' ? \"\".concat(this.width, \"px\") : this.width,\n        padding: \"\".concat(this.dotHeightVal / 2, \"px \").concat(this.dotWidthVal / 2, \"px\")\n      };\n    },\n    stateClass: function stateClass() {\n      return {\n        'slider-state-process-drag': this.processFlag,\n        'slider-state-drag': this.flag && !this.processFlag && !this.keydownFlag,\n        'slider-state-focus': this.focusFlag\n      };\n    },\n    tooltipStatus: function tooltipStatus() {\n      return this.tooltip === 'hover' && this.flag ? 'slider-always' : this.tooltip ? \"slider-\".concat(this.tooltip) : '';\n    },\n    tooltipClass: function tooltipClass() {\n      return [\"slider-tooltip-\".concat(this.tooltipDirection), 'slider-tooltip'];\n    },\n    minimum: function minimum() {\n      return this.data ? 0 : this.min;\n    },\n    maximum: function maximum() {\n      return this.data ? this.data.length - 1 : this.max;\n    },\n    multiple: function multiple() {\n      var decimals = \"\".concat(this.step).split('.')[1];\n      return decimals ? Math.pow(10, decimals.length) : 1;\n    },\n    indexRange: function indexRange() {\n      return this.isRange ? this.currentIndex : [0, this.currentIndex];\n    },\n    spacing: function spacing() {\n      return this.data ? 1 : this.step;\n    },\n    gap: function gap() {\n      return this.size / this.total;\n    },\n    dotWidthVal: function dotWidthVal() {\n      return typeof this.dotWidth === 'number' ? this.dotWidth : this.dotSize;\n    },\n    dotHeightVal: function dotHeightVal() {\n      return typeof this.dotHeight === 'number' ? this.dotHeight : this.dotSize;\n    },\n    disabledArray: function disabledArray() {\n      return isArray(this.disabled) ? this.disabled : [this.disabled, this.disabled];\n    },\n    boolDisabled: function boolDisabled() {\n      return this.disabledArray.every(function (b) {\n        return b === true;\n      });\n    },\n    disabledClass: function disabledClass() {\n      return this.boolDisabled ? 'slider-disabled' : '';\n    },\n    flowDirection: function flowDirection() {\n      return \"slider-\".concat(this.direction + (this.reverse ? '-reverse' : ''));\n    },\n    isRange: function isRange() {\n      return isArray(this.value);\n    },\n    isDisabled: function isDisabled() {\n      return this.eventType === 'none' ? true : this.boolDisabled;\n    },\n    isFixed: function isFixed() {\n      return this.fixed || this.minRange;\n    },\n    position: function position() {\n      return this.isRange ? [(this.currentValue[0] - this.minimum) / this.spacing * this.gap, (this.currentValue[1] - this.minimum) / this.spacing * this.gap] : (this.currentValue - this.minimum) / this.spacing * this.gap;\n    },\n    limit: function limit() {\n      return this.isRange ? this.isFixed ? [[0, (this.total - this.fixedValue) * this.gap], [this.fixedValue * this.gap, this.size]] : [[0, this.position[1]], [this.position[0], this.size]] : [0, this.size];\n    },\n    valueLimit: function valueLimit() {\n      return this.isRange ? this.isFixed ? [[this.minimum, this.maximum - this.fixedValue * (this.spacing * this.multiple) / this.multiple], [this.minimum + this.fixedValue * (this.spacing * this.multiple) / this.multiple, this.maximum]] : [[this.minimum, this.currentValue[1]], [this.currentValue[0], this.maximum]] : [this.minimum, this.maximum];\n    },\n    idleSlider: function idleSlider() {\n      return this.currentSlider === 0 ? 1 : 0;\n    },\n    slider: function slider() {\n      return this.isRange ? [this.$refs.dot0, this.$refs.dot1] : this.$refs.dot;\n    }\n  },\n  methods: {\n    setValue: function setValue(val, noCb, speed) {\n      var _this2 = this;\n\n      if (isDiff(this.val, val)) {\n        var resetVal = this.limitValue(val);\n        this.val = this.isRange ? resetVal.concat() : resetVal;\n        this.computedFixedValue();\n        this.syncValue(noCb);\n      }\n\n      this.$nextTick(function () {\n        return _this2.setPosition(speed);\n      });\n    },\n    setIndex: function setIndex(val) {\n      if (isArray(val) && this.isRange) {\n        var value;\n\n        if (this.data) {\n          value = [this.data[val[0]], this.data[val[1]]];\n        } else {\n          value = [this.getValueByIndex(val[0]), this.getValueByIndex(val[1])];\n        }\n\n        this.setValue(value);\n      } else {\n        val = this.getValueByIndex(val);\n\n        if (this.isRange) {\n          this.currentSlider = val > (this.currentValue[1] - this.currentValue[0]) / 2 + this.currentValue[0] ? 1 : 0;\n        }\n\n        this.setCurrentValue(val);\n      }\n    },\n    wrapClick: function wrapClick(e) {\n      if (this.isDisabled || !this.clickable || this.processFlag || this.dragFlag) return false;\n      var pos = this.getPos(e);\n\n      if (this.isRange) {\n        if (this.disabledArray.every(function (b) {\n          return b === false;\n        })) {\n          this.currentSlider = pos > (this.position[1] - this.position[0]) / 2 + this.position[0] ? 1 : 0;\n        } else if (this.disabledArray[0]) {\n          if (pos < this.position[0]) return false;\n          this.currentSlider = 1;\n        } else if (this.disabledArray[1]) {\n          if (pos > this.position[1]) return false;\n          this.currentSlider = 0;\n        }\n      }\n\n      if (this.disabledArray[this.currentSlider]) {\n        return false;\n      }\n\n      this.setValueOnPos(pos);\n\n      if (this.isRange && this.tooltipMerge) {\n        var timer = setInterval(this.handleOverlapTooltip, 16.7);\n        setTimeout(function () {\n          return window.clearInterval(timer);\n        }, this.speed * 1000);\n      }\n    },\n    processClick: function processClick(e) {\n      if (this.fixed) e.stopPropagation();\n    },\n    syncValue: function syncValue(noCb) {\n      var val = this.isRange ? this.val.concat() : this.val;\n      this.$emit('input', val);\n      this.keydownFlag && this.$emit('on-keypress', val);\n      noCb || this.$emit('slide-end', val);\n    },\n    getPos: function getPos(e) {\n      this.realTime && this.getStaticData();\n      return this.direction === 'vertical' ? this.reverse ? e.pageY - this.offset : this.size - (e.pageY - this.offset) : this.reverse ? this.size - (e.pageX - this.offset) : e.pageX - this.offset;\n    },\n    setValueOnPos: function setValueOnPos(pos, isDrag) {\n      var range = this.isRange ? this.limit[this.currentSlider] : this.limit;\n      var valueRange = this.isRange ? this.valueLimit[this.currentSlider] : this.valueLimit;\n      var index = Math.round(pos / this.gap);\n\n      if (pos >= range[0] && pos <= range[1]) {\n        var v = this.getValueByIndex(index);\n        this.setTransform(pos);\n        this.setCurrentValue(v, isDrag);\n\n        if (this.isRange && (this.fixed || this.isLessRange(pos, index))) {\n          this.setTransform(pos + this.fixedValue * this.gap * (this.currentSlider === 0 ? 1 : -1), true);\n          this.setCurrentValue((v * this.multiple + this.fixedValue * this.spacing * this.multiple * (this.currentSlider === 0 ? 1 : -1)) / this.multiple, isDrag, true);\n        }\n      } else {\n        var anotherSlider = pos < range[0] ? 0 : 1;\n        var currentSlider = anotherSlider === 0 ? 1 : 0;\n        this.setTransform(range[anotherSlider]);\n        this.setCurrentValue(valueRange[anotherSlider]);\n\n        if (this.isRange && (this.fixed || this.isLessRange(pos, index))) {\n          this.setTransform(this.limit[this.idleSlider][anotherSlider], true);\n          this.setCurrentValue(this.valueLimit[this.idleSlider][anotherSlider], isDrag, true);\n        } else if (this.isRange && (this.enableCross || this.crossFlag) && !this.isFixed && !this.disabledArray[anotherSlider] && this.currentSlider === currentSlider) {\n          this.focusSlider = anotherSlider;\n          this.currentSlider = anotherSlider;\n        }\n      }\n\n      this.crossFlag = false;\n    },\n    setCurrentValue: function setCurrentValue(val, isDrag, isIdleSlider) {\n      var slider = isIdleSlider ? this.idleSlider : this.currentSlider;\n      if (val < this.minimum || val > this.maximum) return false;\n\n      if (this.isRange) {\n        if (isDiff(this.currentValue[slider], val)) {\n          this.currentValue.splice(slider, 1, val);\n\n          if (!this.lazy || !this.flag) {\n            this.syncValue();\n          }\n        }\n      } else if (isDiff(this.currentValue, val)) {\n        this.currentValue = val;\n\n        if (!this.lazy || !this.flag) {\n          this.syncValue();\n        }\n      }\n\n      isDrag || this.setPosition();\n    },\n    setPosition: function setPosition(speed) {\n      this.flag || this.setTransitionTime(speed === undefined ? this.speed : speed);\n\n      if (this.isRange) {\n        this.setTransform(this.position[0], this.currentSlider === 1);\n        this.setTransform(this.position[1], this.currentSlider === 0);\n      } else {\n        this.setTransform(this.position);\n      }\n\n      this.flag || this.setTransitionTime(0);\n    },\n    setTransform: function setTransform(val, isIdleSlider) {\n      var slider = isIdleSlider ? this.idleSlider : this.currentSlider;\n      var value = roundToDPR((this.direction === 'vertical' ? this.dotHeightVal / 2 - val : val - this.dotWidthVal / 2) * (this.reverse ? -1 : 1));\n      var translateValue = this.direction === 'vertical' ? \"translateY(\".concat(value, \"px)\") : \"translateX(\".concat(value, \"px)\");\n      var processSize = this.fixed ? \"\".concat(this.fixedValue * this.gap, \"px\") : \"\".concat(slider === 0 ? this.position[1] - val : val - this.position[0], \"px\");\n      var processPos = this.fixed ? \"\".concat(slider === 0 ? val : val - this.fixedValue * this.gap, \"px\") : \"\".concat(slider === 0 ? val : this.position[0], \"px\");\n\n      if (this.isRange) {\n        this.slider[slider].style[transform] = translateValue;\n\n        if (this.direction === 'vertical') {\n          this.$refs.process.style.height = processSize;\n          this.$refs.process.style[this.reverse ? 'top' : 'bottom'] = processPos;\n        } else {\n          this.$refs.process.style.width = processSize;\n          this.$refs.process.style[this.reverse ? 'right' : 'left'] = processPos;\n        }\n      } else {\n        this.slider.style[transform] = translateValue;\n\n        if (this.direction === 'vertical') {\n          this.$refs.process.style.height = \"\".concat(val, \"px\");\n          this.$refs.process.style[this.reverse ? 'top' : 'bottom'] = 0;\n        } else {\n          this.$refs.process.style.width = \"\".concat(val, \"px\");\n          this.$refs.process.style[this.reverse ? 'right' : 'left'] = 0;\n        }\n      }\n    },\n    setTransitionTime: function setTransitionTime(time) {\n      // In order to avoid browser merge style and modify together\n      time || this.$refs.process.offsetWidth;\n\n      if (this.isRange) {\n        var sliderLen = this.slider.length;\n\n        for (var i = 0; i < sliderLen; i++) {\n          this.slider[i].style[transitionDuration] = \"\".concat(time, \"s\");\n        }\n\n        this.$refs.process.style[transitionDuration] = \"\".concat(time, \"s\");\n      } else {\n        this.slider.style[transitionDuration] = \"\".concat(time, \"s\");\n        this.$refs.process.style[transitionDuration] = \"\".concat(time, \"s\");\n      }\n    },\n    computedFixedValue: function computedFixedValue() {\n      if (!this.isFixed) {\n        this.fixedValue = 0;\n        return false;\n      }\n\n      this.fixedValue = this.currentIndex[1] - this.currentIndex[0];\n      this.fixedValue = Math.max(this.fixed ? this.currentIndex[1] - this.currentIndex[0] : 0, this.minRange || 0);\n    },\n    limitValue: function limitValue(val) {\n      var _this3 = this;\n\n      if (this.data) {\n        return val;\n      }\n\n      var inRange = function inRange(v) {\n        if (v < _this3.min) {\n          _this3.printError(\"The value of the slider is \".concat(val, \", the minimum value is \").concat(_this3.min, \", the value of this slider can not be less than the minimum value\"));\n\n          return _this3.min;\n        } else if (v > _this3.max) {\n          _this3.printError(\"The value of the slider is \".concat(val, \", the maximum value is \").concat(_this3.max, \", the value of this slider can not be greater than the maximum value\"));\n\n          return _this3.max;\n        }\n\n        return v;\n      };\n\n      if (this.isRange) {\n        return val.map(function (v) {\n          return inRange(v);\n        });\n      } else {\n        return inRange(val);\n      }\n    },\n    getStaticData: function getStaticData() {\n      if (this.$refs.elem) {\n        this.size = this.direction === 'vertical' ? this.$refs.elem.offsetHeight : this.$refs.elem.offsetWidth;\n        this.offset = this.direction === 'vertical' ? this.$refs.elem.getBoundingClientRect().top + window.pageYOffset || document.documentElement.scrollTop : this.$refs.elem.getBoundingClientRect().left;\n      }\n    },\n    handleOverlapTooltip: function handleOverlapTooltip() {\n      var isDirectionSame = this.tooltipDirection[0] === this.tooltipDirection[1];\n\n      if (this.isRange && isDirectionSame) {\n        var tooltip0 = this.reverse ? this.$refs.tooltip1 : this.$refs.tooltip0;\n        var tooltip1 = this.reverse ? this.$refs.tooltip0 : this.$refs.tooltip1;\n        var tooltip0Rect = tooltip0.getBoundingClientRect();\n        var tooltip1Rect = tooltip1.getBoundingClientRect();\n        var tooltip0Right = tooltip0Rect.right;\n        var tooltip1Left = tooltip1Rect.left;\n        var tooltip0Y = tooltip0Rect.top;\n        var tooltip1Y = tooltip1Rect.top + tooltip1Rect.height;\n        var horizontalOverlap = this.direction === 'horizontal' && tooltip0Right > tooltip1Left;\n        var verticalOverlap = this.direction === 'vertical' && tooltip1Y > tooltip0Y;\n\n        if (horizontalOverlap || verticalOverlap) {\n          this.handleDisplayMergedTooltip(true);\n        } else {\n          this.handleDisplayMergedTooltip(false);\n        }\n      }\n    },\n    handleDisplayMergedTooltip: function handleDisplayMergedTooltip(show) {\n      var tooltip0 = this.$refs.tooltip0;\n      var tooltip1 = this.$refs.tooltip1;\n      var mergedTooltip = this.$refs.process.getElementsByClassName('merged-tooltip')[0];\n\n      if (show) {\n        tooltip0.style.visibility = 'hidden';\n        tooltip1.style.visibility = 'hidden';\n        mergedTooltip.style.visibility = 'visible';\n      } else {\n        tooltip0.style.visibility = 'visible';\n        tooltip1.style.visibility = 'visible';\n        mergedTooltip.style.visibility = 'hidden';\n      }\n    },\n    isLessRange: function isLessRange(pos, index) {\n      if (!this.isRange || !this.minRange && !this.maxRange) {\n        return false;\n      }\n\n      var diff = this.currentSlider === 0 ? this.currentIndex[1] - index : index - this.currentIndex[0];\n\n      if (this.minRange && diff <= this.minRange) {\n        this.fixedValue = this.minRange;\n        return true;\n      }\n\n      if (this.maxRange && diff >= this.maxRange) {\n        this.fixedValue = this.maxRange;\n        return true;\n      }\n\n      this.computedFixedValue();\n      return false;\n    },\n    getValueByIndex: function getValueByIndex(index) {\n      return (this.spacing * this.multiple * index + this.minimum * this.multiple) / this.multiple;\n    },\n    getIndexByValue: function getIndexByValue(value) {\n      return Math.round((value - this.minimum) * this.multiple) / (this.spacing * this.multiple);\n    },\n    formatting: function formatting(value) {\n      return typeof this.formatter === 'string' ? this.formatter.replace(/{value}/, value) : this.formatter(value);\n    },\n    mergeFormatting: function mergeFormatting(value1, value2) {\n      return typeof this.mergeFormatter === 'string' ? this.mergeFormatter.replace(/{(value1|value2)}/g, function (_, key) {\n        return key === 'value1' ? value1 : value2;\n      }) : this.mergeFormatter(value1, value2);\n    },\n    _start: function _start(e) {\n      var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var isProcess = arguments.length > 2 ? arguments[2] : undefined;\n\n      if (this.disabledArray[index]) {\n        return false;\n      }\n\n      if (this.stopPropagation) {\n        e.stopPropagation();\n      }\n\n      if (this.isRange) {\n        this.currentSlider = index;\n\n        if (isProcess) {\n          if (!this.processDraggable) {\n            return false;\n          }\n\n          this.processFlag = true;\n          this.processSign = {\n            pos: this.position,\n            start: this.getPos(e.targetTouches && e.targetTouches[0] ? e.targetTouches[0] : e)\n          };\n        }\n\n        if (!this.enableCross && this.val[0] === this.val[1]) {\n          this.crossFlag = true;\n        }\n      }\n\n      if (!isProcess && this.useKeyboard) {\n        this.focusFlag = true;\n        this.focusSlider = index;\n      }\n\n      this.flag = true;\n      this.$emit('drag-start', this);\n    },\n    _move: function _move(e) {\n      // e.preventDefault() // NOTE: COMMENTED, BREAKS SELECTING THINGS ON PAGE\n      if (this.stopPropagation) {\n        e.stopPropagation();\n      }\n\n      if (!this.flag) return false;\n      if (e.targetTouches && e.targetTouches[0]) e = e.targetTouches[0];\n\n      if (this.processFlag) {\n        this.currentSlider = 0;\n        this.setValueOnPos(this.processSign.pos[0] + this.getPos(e) - this.processSign.start, true);\n        this.currentSlider = 1;\n        this.setValueOnPos(this.processSign.pos[1] + this.getPos(e) - this.processSign.start, true);\n      } else {\n        this.dragFlag = true;\n        this.setValueOnPos(this.getPos(e), true);\n      }\n\n      if (this.isRange && this.tooltipMerge) {\n        this.handleOverlapTooltip();\n      }\n    },\n    _end: function _end(e) {\n      var _this4 = this;\n\n      if (this.stopPropagation) {\n        e.stopPropagation();\n      }\n\n      if (this.flag) {\n        this.$emit('drag-end', this);\n\n        if (this.lazy && isDiff(this.val, this.value)) {\n          this.syncValue();\n        }\n      } else {\n        return false;\n      }\n\n      this.flag = false;\n      this.$nextTick(function () {\n        _this4.crossFlag = false;\n        _this4.dragFlag = false;\n        _this4.processFlag = false;\n      });\n      this.setPosition();\n    },\n    blurSlider: function blurSlider(e) {\n      var dot = this.isRange ? this.$refs[\"dot\".concat(this.focusSlider)] : this.$refs.dot;\n\n      if (!dot || dot === e.target || dot.contains(e.target)) {\n        return false;\n      }\n\n      this.focusFlag = false;\n    },\n    handleKeydown: function handleKeydown(e) {\n      if (!this.useKeyboard) {\n        return false;\n      }\n\n      var keyCode = e.which || e.keyCode;\n\n      switch (keyCode) {\n        case 37:\n        case 40:\n          e.preventDefault(); // e.stopPropagation()\n\n          this.keydownFlag = true;\n          this.flag = true;\n          this.changeFocusSlider(this.actionsKeyboard[0]);\n          break;\n\n        case 38:\n        case 39:\n          e.preventDefault(); // e.stopPropagation()\n\n          this.keydownFlag = true;\n          this.flag = true;\n          this.changeFocusSlider(this.actionsKeyboard[1]);\n          break;\n\n        default:\n          break;\n      }\n    },\n    handleKeyup: function handleKeyup() {\n      if (this.keydownFlag) {\n        this.keydownFlag = false;\n        this.flag = false;\n      }\n    },\n    changeFocusSlider: function changeFocusSlider(fn) {\n      var _this5 = this;\n\n      if (this.isRange) {\n        var arr = this.currentIndex.map(function (index, i) {\n          if (i === _this5.focusSlider || _this5.fixed) {\n            var val = fn(index);\n            var range = _this5.fixed ? _this5.valueLimit[i] : [0, _this5.total];\n\n            if (val <= range[1] && val >= range[0]) {\n              return val;\n            }\n          }\n\n          return index;\n        });\n\n        if (arr[0] > arr[1]) {\n          this.focusSlider = this.focusSlider === 0 ? 1 : 0;\n          arr = arr.reverse();\n        }\n\n        this.setIndex(arr);\n      } else {\n        this.setIndex(fn(this.currentIndex));\n      }\n    },\n    bindEvents: function bindEvents() {\n      var me = this;\n\n      this.processStartFn = function (e) {\n        me._start(e, 0, true);\n      };\n\n      this.dot0StartFn = function (e) {\n        me._start(e, 0);\n      };\n\n      this.dot1StartFn = function (e) {\n        me._start(e, 1);\n      };\n\n      if (isMobile) {\n        addEvent(this.$refs.process, EVENT_TOUCH_START, this.processStartFn);\n        addEvent(document, EVENT_TOUCH_MOVE, this._move);\n        addEvent(document, EVENT_TOUCH_END, this._end);\n        addEvent(document, EVENT_TOUCH_CANCEL, this._end);\n\n        if (this.isRange) {\n          addEvent(this.$refs.dot0, EVENT_TOUCH_START, this.dot0StartFn);\n          addEvent(this.$refs.dot1, EVENT_TOUCH_START, this.dot1StartFn);\n        } else {\n          addEvent(this.$refs.dot, EVENT_TOUCH_START, this._start);\n        }\n      } else {\n        addEvent(this.$refs.process, EVENT_MOUSE_DOWN, this.processStartFn);\n        addEvent(document, EVENT_MOUSE_DOWN, this.blurSlider);\n        addEvent(document, EVENT_MOUSE_MOVE, this._move);\n        addEvent(document, EVENT_MOUSE_UP, this._end);\n        addEvent(document, EVENT_MOUSE_LEAVE, this._end);\n\n        if (this.isRange) {\n          addEvent(this.$refs.dot0, EVENT_MOUSE_DOWN, this.dot0StartFn);\n          addEvent(this.$refs.dot1, EVENT_MOUSE_DOWN, this.dot1StartFn);\n        } else {\n          addEvent(this.$refs.dot, EVENT_MOUSE_DOWN, this._start);\n        }\n      }\n\n      addEvent(document, EVENT_KEY_DOWN, this.handleKeydown);\n      addEvent(document, EVENT_KEY_UP, this.handleKeyup);\n      addEvent(window, EVENT_RESIZE, this.refresh);\n\n      if (this.isRange && this.tooltipMerge) {\n        addEvent(this.$refs.dot0, transitionEnd, this.handleOverlapTooltip);\n        addEvent(this.$refs.dot1, transitionEnd, this.handleOverlapTooltip);\n      }\n    },\n    unbindEvents: function unbindEvents() {\n      if (isMobile) {\n        removeEvent(this.$refs.process, EVENT_TOUCH_START, this.processStartFn);\n        removeEvent(document, EVENT_TOUCH_MOVE, this._move);\n        removeEvent(document, EVENT_TOUCH_END, this._end);\n        removeEvent(document, EVENT_TOUCH_CANCEL, this._end);\n\n        if (this.isRange) {\n          removeEvent(this.$refs.dot0, EVENT_TOUCH_START, this.dot0StartFn);\n          removeEvent(this.$refs.dot1, EVENT_TOUCH_START, this.dot1StartFn);\n        } else {\n          removeEvent(this.$refs.dot, EVENT_TOUCH_START, this._start);\n        }\n      } else {\n        removeEvent(this.$refs.process, EVENT_MOUSE_DOWN, this.processStartFn);\n        removeEvent(document, EVENT_MOUSE_DOWN, this.blurSlider);\n        removeEvent(document, EVENT_MOUSE_MOVE, this._move);\n        removeEvent(document, EVENT_MOUSE_UP, this._end);\n        removeEvent(document, EVENT_MOUSE_LEAVE, this._end);\n\n        if (this.isRange) {\n          removeEvent(this.$refs.dot0, EVENT_MOUSE_DOWN, this.dot0StartFn);\n          removeEvent(this.$refs.dot1, EVENT_MOUSE_DOWN, this.dot1StartFn);\n        } else {\n          removeEvent(this.$refs.dot, EVENT_MOUSE_DOWN, this._start);\n        }\n      }\n\n      removeEvent(document, EVENT_KEY_DOWN, this.handleKeydown);\n      removeEvent(document, EVENT_KEY_UP, this.handleKeyup);\n      removeEvent(window, EVENT_RESIZE, this.refresh);\n\n      if (this.isRange && this.tooltipMerge) {\n        removeEvent(this.$refs.dot0, transitionEnd, this.handleOverlapTooltip);\n        removeEvent(this.$refs.dot1, transitionEnd, this.handleOverlapTooltip);\n      }\n    },\n    refresh: function refresh() {\n      if (this.$refs.elem) {\n        this.getStaticData();\n        this.computedFixedValue();\n        this.setPosition();\n        this.unbindEvents();\n        this.bindEvents();\n      }\n    },\n    printError: function printError(msg) {\n      if (this.debug) {\n        console.error(\"[VueSlider error]: \".concat(msg));\n      }\n    }\n  },\n  mounted: function mounted() {\n    var _this6 = this;\n\n    this.isComponentExists = true;\n\n    if (typeof window === 'undefined' || typeof document === 'undefined') {\n      return this.printError('window or document is undefined, can not be initialization.');\n    }\n\n    this.$nextTick(function () {\n      _this6.getStaticData();\n\n      _this6.setValue(_this6.limitValue(_this6.value), true, _this6.startAnimation ? _this6.speed : 0);\n\n      _this6.bindEvents();\n\n      if (_this6.isRange && _this6.tooltipMerge && !_this6.startAnimation) {\n        _this6.handleOverlapTooltip();\n      }\n    });\n    this.isMounted = true;\n  },\n  watch: {\n    value: function value(val) {\n      this.flag || this.setValue(val, true);\n    },\n    show: function show(bool) {\n      if (bool && !this.size) {\n        this.$nextTick(this.refresh);\n      }\n    },\n    max: function max(val) {\n      if (val < this.min) {\n        return this.printError('The maximum value can not be less than the minimum value.');\n      }\n\n      var resetVal = this.limitValue(this.val);\n      this.setValue(resetVal);\n      this.refresh();\n    },\n    min: function min(val) {\n      if (val > this.max) {\n        return this.printError('The minimum value can not be greater than the maximum value.');\n      }\n\n      var resetVal = this.limitValue(this.val);\n      this.setValue(resetVal);\n      this.refresh();\n    },\n    fixed: function fixed() {\n      this.computedFixedValue();\n    },\n    minRange: function minRange() {\n      this.computedFixedValue();\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.isComponentExists = false;\n    this.unbindEvents();\n    this.refresh();\n  },\n  deactivated: function deactivated() {\n    this.isComponentExists = false;\n    this.unbindEvents();\n    this.refresh();\n  }\n};\n\nvar version = \"1.0.3\";\n\nSlider.version = version;\n\nSlider.install = function (Vue) {\n  Vue.component(Slider.name, Slider);\n};\n\nif (typeof window !== 'undefined' && window.Vue) {\n  window.Vue.use(Slider);\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Slider);\n\n\n//# sourceURL=webpack:///./node_modules/vue-range-component-fixed/dist/vue-range-slider.esm.js?");

/***/ })

}]);